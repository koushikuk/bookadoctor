<?php 
/* hook_help
* Logo Design help text
*/
function services_api_help($path, $arg) {
  if ($path == 'admin/help#services_api') {
    return check_markup(file_get_contents( dirname(__FILE__) . "/README.txt") );
  }
}


/**
 * Implements hook_mail_alter().
 */
function services_api_mail_alter(&$message) {
  if ($message['key'] == 'register_no_approval_required') {
    $message['send'] = FALSE;
  }
}


/**
 * Implements of hook_services_resources().
 */
function services_api_services_resources() {
  $api = array(
	'update_profile' => array(
	  'operations' => array(
		'create' => array(
		   'help' => 'Update Profile API',
		   'callback' => '_update_profile',
		   'access arguments' => array('access content'),
		   'access arguments append' => FALSE,
		   'args' => array(
				array(
				'name' => 'data',
				'type' => 'varchar',
				'description' => 'data',
				'source' => 'data',
				'optional' => FALSE,
				),
				
		   ),
		 ),
	  ),
	),
	'telos_user' => array(
	  'operations' => array(
		'create' => array(
		   'help' => 'Creates a user',
		   //'callback' => '_update_profile',
		   'access arguments' => array('access content'),
		   'access arguments append' => FALSE,
		   'args' => array(
				array(
				'name' => 'data',
				'type' => 'varchar',
				'description' => 'data',
				'source' => 'data',
				'optional' => FALSE,
				),
				
		   ),
		 ),
	  ),
	  'actions' => array(
          'register' => array(
            'help' => 'Registers a user',
            'callback' => 'telos_user_register',
            'access arguments' => array('access content'),
            'access arguments append' => FALSE,
            'args' => array(
              array(
                'name' => 'data',
                'type' => 'struct',
                'description' => 'data',
                'source' => 'data',
                'optional' => FALSE,
              ),
            ),
          ),
		  'login' => array(
		   'help' => 'User Login API',
		   'callback' => 'telos_user_login',
		   'access arguments' => array('access content'),
		   'args' => array(
				array(
				'name' => 'data',
				'type' => 'varchar',
				'description' => 'data',
				'source' => 'data',
				'optional' => FALSE,
			),
		   ),
		 ),
      ),
	 
	),
	
	
	'register_appid' => array(
	  'operations' => array(
		'create' => array(
		   'help' => 'Register APPID API',
		   'callback' => '_register_appid',
		   'access arguments' => array('access content'),
		   'access arguments append' => FALSE,
		   'args' => array(
				array(
				'name' => 'data',
				'type' => 'varchar',
				'description' => 'data',
				'source' => 'data',
				'optional' => FALSE,
				),
				
		   ),
		 ),
	  ),
	),	
	
	'update_enrollment_status' => array(
	  'operations' => array(
		'create' => array(
		   'help' => 'Update Enrollment Status API',
		   'callback' => '_update_enrollment_status',
		   'access arguments' => array('access content'),
		   'access arguments append' => FALSE,
		   'args' => array(
				array(
				'name' => 'data',
				'type' => 'varchar',
				'description' => 'data',
				'source' => 'data',
				'optional' => FALSE,
				),
				
		   ),
		 ),
	  ),
	),	

	'user_forget_password' => array(
	  'operations' => array(
		'create' => array(
		   'help' => 'User forget password API',
		   'callback' => '_user_forget_password',
		   'access arguments' => array('access content'),
		   'access arguments append' => FALSE,
		   'args' => array(
				array(
				'name' => 'data',
				'type' => 'varchar',
				'description' => 'data',
				'source' => 'data',
				'optional' => FALSE,
				),
				
		   ),
		 ),
	  ),
	),	
 
);

  return $api;
}

function _update_profile($data){
	
	$userID = $data['user_id'];
	$mailID = $data['mail_id'];
	$pass = $data['pass'];

	if(empty($data) || $userID =="" || $mailID =="" || $pass =="" ) {
		return array("status"=>false,"message"=> "Please enter all mandatory fields.");
	}	
	
	try {	
		$user_details = user_load($userID);
		if($user_details){		
			require_once 'includes/password.inc';
			$user_details->mail = $mailID;
			$user_details->pass = user_hash_password($pass); 
			user_save($user_details);
			return array("status"=>true, "message" => "Profile updated successfully.");	
		} 
		else {
			
			return array("status"=>false, "message" => "Invalid credentials. Please provide valid ID.");
		} 
	}
	catch (Exception $e) {
		return array("status"=>false,"message"=> "Failed to update profile. Please try again later.");
	}
}

function telos_user_login($data){
	global $user;
	
	$username = $data['username'];
	$password = $data['password'];
	$result = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:username)",array(':username' => $username))->fetch();
	
	$user_name = $result->name;
	if ($user->uid) { 
		// user is already logged in
		//   return services_error(t('Already logged in as @user.', array('@user' => $user->name)), 406);
		return array("status"=>false, "status_code"=>406, "message" => t('Already logged in as @user.', array('@user' => $user->name)));
	}

	// Check if account is active.
	if (user_is_blocked($username)) {
		// return services_error(t('The username %name has not been activated or is blocked.', array('%name' => $username)), 403);
		return array("status"=>false, "status_code"=>403, "message" => t('The username @name has not been activated or is blocked.', array('@name' => $username)));
	}

	// Emulate drupal native flood control: check for flood condition.
	$flood_state = array();
	if (variable_get('services_flood_control_enabled', TRUE)) {
		$flood_state = _user_resource_flood_control_precheck($username);
	}

	// Only authenticate if a flood condition was not detected.
	if (empty($flood_state['flood_control_triggered'])) { 
		require_once 'includes/password.inc';
		$uid = user_authenticate($user_name, $password);
	}
	else {
		$uid = FALSE;
	}

	// Emulate drupal native flood control: register flood event, and throw error
	// if a flood condition was previously detected
	if (variable_get('services_flood_control_enabled', TRUE)) {
		$flood_state['uid'] = $uid;
		_user_resource_flood_control_postcheck($flood_state);
	}

	if ($uid) {
		$user = user_load($uid);
		if ($user->uid) {
			user_login_finalize();

			$return = new stdClass();
			$return->sessid = session_id();
			$return->session_name = session_name();
			$return->token = drupal_get_token('services');
			$account = clone $user;

			services_remove_user_data($account);

			$return->user = $account;
			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'node')
				->entityCondition('bundle', 'telos_appid')
				->fieldCondition('field_userid', 'value', $user->uid, '=');
			$result = $query->execute();
			
			if (isset($result['node'])) {
				$app_result = array_keys($result['node']);
				$appRows = entity_load('node', $app_result);
				
				foreach($appRows as $rows){
					$app_id = $rows->field_app_id['und'][0]['value'];
				}
				return array("status"=>true, "uid"=>$user->uid,"sessid"=>$return->sessid,"session_name"=>$return->session_name,"token"=>$return->token, "app_id"=>$app_id, "message" => "Login successfully.");
			}
			else{
				return array("status"=>true, "uid"=>$user->uid,"sessid"=>$return->sessid,"session_name"=>$return->session_name,"token"=>$return->token,"app_id"=>NULL, "message" => "Login successfully.");
			}
		}
	}
	watchdog('user', 'Invalid login attempt for %username.', array('%username' => $username));
	
	return array("status"=>false, "status_code"=>401, "message" => t('Sorry, your username and/or password are incorrect. Please try again'));	
}


function telos_user_register($data){
	global $user;
	try{
	$account = _services_arg_value($data, 'data');
	
	// Load the required includes for saving profile information with drupal_form_submit().
	
	module_load_include('inc', 'user', 'user.pages');

	// Register a new user.
	$form_state['values'] = $account;

	// Determine the password(s). Passwords may not be available as this callback
	// is used for registration as well.
	$pass1 = '';
	$pass2 = '';
	if (isset($account['pass'])) {
		// For legacy usage, passwords come in as a single string. To match the actual form state value keys used by Drupal, we also can collect two passwords via an array.
		if (is_array($account['pass'])) {
			$pass1 = $account['pass']['pass'];
			$pass2 = $account['pass']['conf_pass'];
		}
		else {
			$pass1 = $account['pass'];
			$pass2 = $account['pass'];
		}
	}
	$form_state['values']['pass'] = array(
		'pass1' => $pass1,
		'pass2' => $pass2
	);
	$mail_id = $account['mail'];
	// Set the form state op.
	$form_state['values']['op'] = variable_get('services_user_create_button_resource_create', t('Create new account'));

	// Execute the register form.
	$form_state['programmed_bypass_access_check'] = FALSE;

	drupal_form_submit('user_register_form', $form_state);
	// find and store the new user into the form_state
	if(isset($form_state['values']['uid'])) {
		$form_state['user'] = user_load($form_state['values']['uid']);
	}

	// Error if needed.
	if ($errors = form_get_errors()) {
		//return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
		return array("status"=>false, "status_code"=>406, "message" => t('The email address @mail is already taken.', array('@mail' => $mail_id)));
	}
	else {
		$user = array('uid' => $form_state['user']->uid);
		if ($uri = services_resource_uri(array('user', $user['uid']))) {
		  $user['uri'] = $uri;
		}
		$user['status'] = true;
		$user['message'] = t('User registered successfully.');
		_user_resource_update_services_user($user['uid'], time());

		return array("status"=>true, "uid"=>$user['uid'], "message" => "User registered successfully.");	
	}
	}
	catch(Exception $e){
		return array("status"=>false,"message"=> "Failed to save data. Please try again later.");
	}
}


function _register_appid($data){
	global $user;

	$userID = $data['userid'];
    $appid = $data['appid'];
	
	if(empty($data) || $userID =="" || $appid =="") {
		return array("status"=>false,"message"=> "Mandatory fields are missing.");
	}	
	
	try { 
		 
		if((!empty($userID)) &&(!empty($appid))){
			 $node = new stdClass();
			 $node->uid = $userID;
			 $node->type = 'telos_appid';
			 $node->title = "APP_".$userID;
			 $node->language = LANGUAGE_NONE;
			 $node->status = 1; //(1 or 0): published or not
			 $node->promote = 0; //(1 or 0): promoted to front page
			 $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

			 $node->field_userid['und'][0]['value'] = $userID;
			 $node->field_app_id['und'][0]['value'] = $appid;
			 $node->field_application_name['und'][0]['value'] = "Enrollment";
			 $node = node_submit($node); // Prepare node for saving
			 node_save($node); 
			 
			/////////  Register App_ID on .gov domain //////////// 
			 db_set_active('telosgov');
			 $node = new stdClass();
			 $node->uid = $userID;
			 $node->type = 'telos_appid';
			 $node->title = "APP_".$userID;
			 $node->language = LANGUAGE_NONE;
			 $node->status = 1; //(1 or 0): published or not
			 $node->promote = 0; //(1 or 0): promoted to front page
			 $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write

			 $node->field_userid['und'][0]['value'] = $userID;
			 $node->field_app_id['und'][0]['value'] = $appid;
			 $node->field_application_name['und'][0]['value'] = "Enrollment";
			
			 $node = node_submit($node); // Prepare node for saving
			 
			 node_save($node); 
			 db_set_active(); 
			/////////  Register App_ID on .gov domain ////////////  

			return array("status"=>true, "message" => "Data saved successfully.");	
		} 
		else {
			
			return array("status"=>false, "message" => "Invalid credentials. Please provide valid data.");
		} 
	}
	catch (Exception $e) {
		return array("status"=>false,"message"=> "Failed to save data. Please try again later.");
	}
	
	
	
}


function _update_enrollment_status($data){
	global $user;
	$userID = $data['user_id'];
    $enrollment_status = $data['enrollment_status'];
	
	if(empty($data) || $userID =="" || $enrollment_status =="") {
		return array("status"=>false,"message"=> "Mandatory fields are missing.");
	}	
	try { 
		if((!empty($userID)) &&(!empty($enrollment_status))){
			$user_details = user_load($userID);
			if($enrollment_status == 1){
				$user_details->field_enrollment_status['und'][0]['value'] = 1;	// save enrollment status as completed after payment made
				user_save($user_details);
				return array("status"=>true, "message" => "Data saved successfully.");	
			}
			else{
				return array("status"=>false,"message"=> "Invalid data. Please provide valid enrollment status.");
			}
		}
	}
	catch (Exception $e) {
		return array("status"=>false,"message"=> "No data found. Please try again later.");
	}	
}

/* 

API for Forget Password

*/

function _user_forget_password($data){
	global $user;

	$emailaddress = $data['emailaddress'];

	if(empty($data) || $emailaddress =="") {
		return array("status"=>false,"message"=> "E-mail field is required.");
	}	
	
	try { 
		 
 	    if(!empty($emailaddress)){		
			 
			///////// send one time password rest email////////////  
            global $language;
			$account = user_load_by_mail($emailaddress);
			$username = $account->name;
			$uid = $account->uid;
            if ($username) {
			// Mail one time login URL and instructions using current language.
			$mail = _user_mail_notify('password_reset', $account, $language);
			  if (!empty($mail)) {
			    watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
			    }
 
			return array("status"=>true, "message" => "Further instructions have been sent to your e-mail address");	
 

			} 
			else {
				
				return array("status"=>false, "message" => "Sorry,  ".$emailaddress." is not recognized as a user name or an e-mail address.");
			} 
	

		}
	}	 
	catch (Exception $e) {
		return array("status"=>false,"message"=> "Failed to send email. Please try again later.");
	}
	
	
	
}
